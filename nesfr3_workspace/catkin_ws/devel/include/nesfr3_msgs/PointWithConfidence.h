// Generated by gencpp from file nesfr3_msgs/PointWithConfidence.msg
// DO NOT EDIT!


#ifndef NESFR3_MSGS_MESSAGE_POINTWITHCONFIDENCE_H
#define NESFR3_MSGS_MESSAGE_POINTWITHCONFIDENCE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace nesfr3_msgs
{
template <class ContainerAllocator>
struct PointWithConfidence_
{
  typedef PointWithConfidence_<ContainerAllocator> Type;

  PointWithConfidence_()
    : point()
    , confidence(0.0)  {
    }
  PointWithConfidence_(const ContainerAllocator& _alloc)
    : point(_alloc)
    , confidence(0.0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _point_type;
  _point_type point;

   typedef float _confidence_type;
  _confidence_type confidence;





  typedef boost::shared_ptr< ::nesfr3_msgs::PointWithConfidence_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nesfr3_msgs::PointWithConfidence_<ContainerAllocator> const> ConstPtr;

}; // struct PointWithConfidence_

typedef ::nesfr3_msgs::PointWithConfidence_<std::allocator<void> > PointWithConfidence;

typedef boost::shared_ptr< ::nesfr3_msgs::PointWithConfidence > PointWithConfidencePtr;
typedef boost::shared_ptr< ::nesfr3_msgs::PointWithConfidence const> PointWithConfidenceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nesfr3_msgs::PointWithConfidence_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nesfr3_msgs::PointWithConfidence_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::nesfr3_msgs::PointWithConfidence_<ContainerAllocator1> & lhs, const ::nesfr3_msgs::PointWithConfidence_<ContainerAllocator2> & rhs)
{
  return lhs.point == rhs.point &&
    lhs.confidence == rhs.confidence;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::nesfr3_msgs::PointWithConfidence_<ContainerAllocator1> & lhs, const ::nesfr3_msgs::PointWithConfidence_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace nesfr3_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::nesfr3_msgs::PointWithConfidence_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nesfr3_msgs::PointWithConfidence_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nesfr3_msgs::PointWithConfidence_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nesfr3_msgs::PointWithConfidence_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nesfr3_msgs::PointWithConfidence_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nesfr3_msgs::PointWithConfidence_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nesfr3_msgs::PointWithConfidence_<ContainerAllocator> >
{
  static const char* value()
  {
    return "47cab856215e2b01d6eb9ac884ec9042";
  }

  static const char* value(const ::nesfr3_msgs::PointWithConfidence_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x47cab856215e2b01ULL;
  static const uint64_t static_value2 = 0xd6eb9ac884ec9042ULL;
};

template<class ContainerAllocator>
struct DataType< ::nesfr3_msgs::PointWithConfidence_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nesfr3_msgs/PointWithConfidence";
  }

  static const char* value(const ::nesfr3_msgs::PointWithConfidence_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nesfr3_msgs::PointWithConfidence_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point point\n"
"float32 confidence\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::nesfr3_msgs::PointWithConfidence_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nesfr3_msgs::PointWithConfidence_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.point);
      stream.next(m.confidence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PointWithConfidence_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nesfr3_msgs::PointWithConfidence_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nesfr3_msgs::PointWithConfidence_<ContainerAllocator>& v)
  {
    s << indent << "point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.point);
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NESFR3_MSGS_MESSAGE_POINTWITHCONFIDENCE_H
