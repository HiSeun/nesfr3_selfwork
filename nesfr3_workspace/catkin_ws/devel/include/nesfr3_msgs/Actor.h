// Generated by gencpp from file nesfr3_msgs/Actor.msg
// DO NOT EDIT!


#ifndef NESFR3_MSGS_MESSAGE_ACTOR_H
#define NESFR3_MSGS_MESSAGE_ACTOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/PoseWithCovariance.h>
#include <nesfr3_msgs/PointWithConfidence.h>
#include <geometry_msgs/Point.h>

namespace nesfr3_msgs
{
template <class ContainerAllocator>
struct Actor_
{
  typedef Actor_<ContainerAllocator> Type;

  Actor_()
    : header()
    , name()
    , tracking_id(0)
    , pose()
    , points()
    , nose_point()  {
    }
  Actor_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , name(_alloc)
    , tracking_id(0)
    , pose(_alloc)
    , points()
    , nose_point(_alloc)  {
  (void)_alloc;
      points.assign( ::nesfr3_msgs::PointWithConfidence_<ContainerAllocator> (_alloc));
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef uint32_t _tracking_id_type;
  _tracking_id_type tracking_id;

   typedef  ::geometry_msgs::PoseWithCovariance_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef boost::array< ::nesfr3_msgs::PointWithConfidence_<ContainerAllocator> , 18>  _points_type;
  _points_type points;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _nose_point_type;
  _nose_point_type nose_point;





  typedef boost::shared_ptr< ::nesfr3_msgs::Actor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nesfr3_msgs::Actor_<ContainerAllocator> const> ConstPtr;

}; // struct Actor_

typedef ::nesfr3_msgs::Actor_<std::allocator<void> > Actor;

typedef boost::shared_ptr< ::nesfr3_msgs::Actor > ActorPtr;
typedef boost::shared_ptr< ::nesfr3_msgs::Actor const> ActorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nesfr3_msgs::Actor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nesfr3_msgs::Actor_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::nesfr3_msgs::Actor_<ContainerAllocator1> & lhs, const ::nesfr3_msgs::Actor_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.name == rhs.name &&
    lhs.tracking_id == rhs.tracking_id &&
    lhs.pose == rhs.pose &&
    lhs.points == rhs.points &&
    lhs.nose_point == rhs.nose_point;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::nesfr3_msgs::Actor_<ContainerAllocator1> & lhs, const ::nesfr3_msgs::Actor_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace nesfr3_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::nesfr3_msgs::Actor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nesfr3_msgs::Actor_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nesfr3_msgs::Actor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nesfr3_msgs::Actor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nesfr3_msgs::Actor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nesfr3_msgs::Actor_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nesfr3_msgs::Actor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e66ab061dc9fde49d29081c40910f1a1";
  }

  static const char* value(const ::nesfr3_msgs::Actor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe66ab061dc9fde49ULL;
  static const uint64_t static_value2 = 0xd29081c40910f1a1ULL;
};

template<class ContainerAllocator>
struct DataType< ::nesfr3_msgs::Actor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nesfr3_msgs/Actor";
  }

  static const char* value(const ::nesfr3_msgs::Actor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nesfr3_msgs::Actor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header                           # frame_id and timestamp\n"
"string name                             # name for face recognition\n"
"uint32 tracking_id                      # identification for tracking\n"
"geometry_msgs/PoseWithCovariance pose   # position from detection and \n"
"                                        # orientation from EKF\n"
"PointWithConfidence[18] points          # skeleton points from pose estimation\n"
"                                        # 0: nose\n"
"                                        # 1: left eye\n"
"                                        # 2: right eye\n"
"                                        # 3: left ear\n"
"                                        # 4: right ear\n"
"                                        # 5: left shoulder\n"
"                                        # 6: right shoulder\n"
"                                        # 7: left elbow\n"
"                                        # 8: right elbow\n"
"                                        # 9: left wrist\n"
"                                        # 10: right wrist\n"
"                                        # 11: left hip\n"
"                                        # 12: right hip\n"
"                                        # 13: left knee\n"
"                                        # 14: right knee\n"
"                                        # 15: left ankle\n"
"                                        # 16: right ankle\n"
"                                        # 17: neck\n"
"geometry_msgs/Point nose_point          # nose_point for facerec\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseWithCovariance\n"
"# This represents a pose in free space with uncertainty.\n"
"\n"
"Pose pose\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: nesfr3_msgs/PointWithConfidence\n"
"geometry_msgs/Point point\n"
"float32 confidence\n"
;
  }

  static const char* value(const ::nesfr3_msgs::Actor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nesfr3_msgs::Actor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.name);
      stream.next(m.tracking_id);
      stream.next(m.pose);
      stream.next(m.points);
      stream.next(m.nose_point);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Actor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nesfr3_msgs::Actor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nesfr3_msgs::Actor_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "tracking_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.tracking_id);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseWithCovariance_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::nesfr3_msgs::PointWithConfidence_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
    s << indent << "nose_point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.nose_point);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NESFR3_MSGS_MESSAGE_ACTOR_H
