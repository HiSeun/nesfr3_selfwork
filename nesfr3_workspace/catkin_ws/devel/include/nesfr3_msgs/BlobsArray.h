// Generated by gencpp from file nesfr3_msgs/BlobsArray.msg
// DO NOT EDIT!


#ifndef NESFR3_MSGS_MESSAGE_BLOBSARRAY_H
#define NESFR3_MSGS_MESSAGE_BLOBSARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose.h>
#include <nesfr3_msgs/Blobs.h>

namespace nesfr3_msgs
{
template <class ContainerAllocator>
struct BlobsArray_
{
  typedef BlobsArray_<ContainerAllocator> Type;

  BlobsArray_()
    : header()
    , poses()
    , blobsArray()
    , tracking_id()  {
    }
  BlobsArray_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , poses(_alloc)
    , blobsArray(_alloc)
    , tracking_id(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  _poses_type;
  _poses_type poses;

   typedef std::vector< ::nesfr3_msgs::Blobs_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::nesfr3_msgs::Blobs_<ContainerAllocator> >::other >  _blobsArray_type;
  _blobsArray_type blobsArray;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _tracking_id_type;
  _tracking_id_type tracking_id;





  typedef boost::shared_ptr< ::nesfr3_msgs::BlobsArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nesfr3_msgs::BlobsArray_<ContainerAllocator> const> ConstPtr;

}; // struct BlobsArray_

typedef ::nesfr3_msgs::BlobsArray_<std::allocator<void> > BlobsArray;

typedef boost::shared_ptr< ::nesfr3_msgs::BlobsArray > BlobsArrayPtr;
typedef boost::shared_ptr< ::nesfr3_msgs::BlobsArray const> BlobsArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nesfr3_msgs::BlobsArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nesfr3_msgs::BlobsArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::nesfr3_msgs::BlobsArray_<ContainerAllocator1> & lhs, const ::nesfr3_msgs::BlobsArray_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.poses == rhs.poses &&
    lhs.blobsArray == rhs.blobsArray &&
    lhs.tracking_id == rhs.tracking_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::nesfr3_msgs::BlobsArray_<ContainerAllocator1> & lhs, const ::nesfr3_msgs::BlobsArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace nesfr3_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::nesfr3_msgs::BlobsArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nesfr3_msgs::BlobsArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nesfr3_msgs::BlobsArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nesfr3_msgs::BlobsArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nesfr3_msgs::BlobsArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nesfr3_msgs::BlobsArray_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nesfr3_msgs::BlobsArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a4470e8359735d32f7fb025238b974ce";
  }

  static const char* value(const ::nesfr3_msgs::BlobsArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa4470e8359735d32ULL;
  static const uint64_t static_value2 = 0xf7fb025238b974ceULL;
};

template<class ContainerAllocator>
struct DataType< ::nesfr3_msgs::BlobsArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nesfr3_msgs/BlobsArray";
  }

  static const char* value(const ::nesfr3_msgs::BlobsArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nesfr3_msgs::BlobsArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"geometry_msgs/Pose[] poses\n"
"Blobs[] blobsArray\n"
"int32[] tracking_id\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: nesfr3_msgs/Blobs\n"
"int32 cluster_id\n"
"Blob[] blobs\n"
"================================================================================\n"
"MSG: nesfr3_msgs/Blob\n"
"int32 x\n"
"int32 y\n"
"int32 width\n"
"int32 height\n"
;
  }

  static const char* value(const ::nesfr3_msgs::BlobsArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nesfr3_msgs::BlobsArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.poses);
      stream.next(m.blobsArray);
      stream.next(m.tracking_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BlobsArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nesfr3_msgs::BlobsArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nesfr3_msgs::BlobsArray_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "poses[]" << std::endl;
    for (size_t i = 0; i < v.poses.size(); ++i)
    {
      s << indent << "  poses[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.poses[i]);
    }
    s << indent << "blobsArray[]" << std::endl;
    for (size_t i = 0; i < v.blobsArray.size(); ++i)
    {
      s << indent << "  blobsArray[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::nesfr3_msgs::Blobs_<ContainerAllocator> >::stream(s, indent + "    ", v.blobsArray[i]);
    }
    s << indent << "tracking_id[]" << std::endl;
    for (size_t i = 0; i < v.tracking_id.size(); ++i)
    {
      s << indent << "  tracking_id[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.tracking_id[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NESFR3_MSGS_MESSAGE_BLOBSARRAY_H
