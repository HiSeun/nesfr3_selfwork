// Generated by gencpp from file nesfr3_msgs/Actors2d.msg
// DO NOT EDIT!


#ifndef NESFR3_MSGS_MESSAGE_ACTORS2D_H
#define NESFR3_MSGS_MESSAGE_ACTORS2D_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <nesfr3_msgs/Actor2d.h>

namespace nesfr3_msgs
{
template <class ContainerAllocator>
struct Actors2d_
{
  typedef Actors2d_<ContainerAllocator> Type;

  Actors2d_()
    : header()
    , actors2d()  {
    }
  Actors2d_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , actors2d(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::nesfr3_msgs::Actor2d_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::nesfr3_msgs::Actor2d_<ContainerAllocator> >::other >  _actors2d_type;
  _actors2d_type actors2d;





  typedef boost::shared_ptr< ::nesfr3_msgs::Actors2d_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nesfr3_msgs::Actors2d_<ContainerAllocator> const> ConstPtr;

}; // struct Actors2d_

typedef ::nesfr3_msgs::Actors2d_<std::allocator<void> > Actors2d;

typedef boost::shared_ptr< ::nesfr3_msgs::Actors2d > Actors2dPtr;
typedef boost::shared_ptr< ::nesfr3_msgs::Actors2d const> Actors2dConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nesfr3_msgs::Actors2d_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nesfr3_msgs::Actors2d_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::nesfr3_msgs::Actors2d_<ContainerAllocator1> & lhs, const ::nesfr3_msgs::Actors2d_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.actors2d == rhs.actors2d;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::nesfr3_msgs::Actors2d_<ContainerAllocator1> & lhs, const ::nesfr3_msgs::Actors2d_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace nesfr3_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::nesfr3_msgs::Actors2d_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nesfr3_msgs::Actors2d_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nesfr3_msgs::Actors2d_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nesfr3_msgs::Actors2d_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nesfr3_msgs::Actors2d_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nesfr3_msgs::Actors2d_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nesfr3_msgs::Actors2d_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c1bee49e25f0b078e91e5e00c305ebd5";
  }

  static const char* value(const ::nesfr3_msgs::Actors2d_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc1bee49e25f0b078ULL;
  static const uint64_t static_value2 = 0xe91e5e00c305ebd5ULL;
};

template<class ContainerAllocator>
struct DataType< ::nesfr3_msgs::Actors2d_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nesfr3_msgs/Actors2d";
  }

  static const char* value(const ::nesfr3_msgs::Actors2d_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nesfr3_msgs::Actors2d_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header   # For frame_id and timestamp\n"
"Actor2d[] actors2d\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: nesfr3_msgs/Actor2d\n"
"geometry_msgs/Point[18] points          # skeleton points from pose estimation\n"
"                                        # 0: nose\n"
"                                        # 1: left eye\n"
"                                        # 2: right eye\n"
"                                        # 3: left ear\n"
"                                        # 4: right ear\n"
"                                        # 5: left shoulder\n"
"                                        # 6: right shoulder\n"
"                                        # 7: left elbow\n"
"                                        # 8: right elbow\n"
"                                        # 9: left wrist\n"
"                                        # 10: right wrist\n"
"                                        # 11: left hip\n"
"                                        # 12: right hip\n"
"                                        # 13: left knee\n"
"                                        # 14: right knee\n"
"                                        # 15: left ankle\n"
"                                        # 16: right ankle\n"
"                                        # 17: neck  \n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::nesfr3_msgs::Actors2d_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nesfr3_msgs::Actors2d_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.actors2d);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Actors2d_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nesfr3_msgs::Actors2d_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nesfr3_msgs::Actors2d_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "actors2d[]" << std::endl;
    for (size_t i = 0; i < v.actors2d.size(); ++i)
    {
      s << indent << "  actors2d[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::nesfr3_msgs::Actor2d_<ContainerAllocator> >::stream(s, indent + "    ", v.actors2d[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NESFR3_MSGS_MESSAGE_ACTORS2D_H
