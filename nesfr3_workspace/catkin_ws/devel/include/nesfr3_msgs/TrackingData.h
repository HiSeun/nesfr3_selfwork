// Generated by gencpp from file nesfr3_msgs/TrackingData.msg
// DO NOT EDIT!


#ifndef NESFR3_MSGS_MESSAGE_TRACKINGDATA_H
#define NESFR3_MSGS_MESSAGE_TRACKINGDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace nesfr3_msgs
{
template <class ContainerAllocator>
struct TrackingData_
{
  typedef TrackingData_<ContainerAllocator> Type;

  TrackingData_()
    : header()
    , id_num()
    , tracking_id()  {
    }
  TrackingData_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , id_num(_alloc)
    , tracking_id(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _id_num_type;
  _id_num_type id_num;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _tracking_id_type;
  _tracking_id_type tracking_id;





  typedef boost::shared_ptr< ::nesfr3_msgs::TrackingData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nesfr3_msgs::TrackingData_<ContainerAllocator> const> ConstPtr;

}; // struct TrackingData_

typedef ::nesfr3_msgs::TrackingData_<std::allocator<void> > TrackingData;

typedef boost::shared_ptr< ::nesfr3_msgs::TrackingData > TrackingDataPtr;
typedef boost::shared_ptr< ::nesfr3_msgs::TrackingData const> TrackingDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nesfr3_msgs::TrackingData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nesfr3_msgs::TrackingData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::nesfr3_msgs::TrackingData_<ContainerAllocator1> & lhs, const ::nesfr3_msgs::TrackingData_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.id_num == rhs.id_num &&
    lhs.tracking_id == rhs.tracking_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::nesfr3_msgs::TrackingData_<ContainerAllocator1> & lhs, const ::nesfr3_msgs::TrackingData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace nesfr3_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::nesfr3_msgs::TrackingData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nesfr3_msgs::TrackingData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nesfr3_msgs::TrackingData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nesfr3_msgs::TrackingData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nesfr3_msgs::TrackingData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nesfr3_msgs::TrackingData_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nesfr3_msgs::TrackingData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "248c310616213a43cbb9e8c32deef897";
  }

  static const char* value(const ::nesfr3_msgs::TrackingData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x248c310616213a43ULL;
  static const uint64_t static_value2 = 0xcbb9e8c32deef897ULL;
};

template<class ContainerAllocator>
struct DataType< ::nesfr3_msgs::TrackingData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nesfr3_msgs/TrackingData";
  }

  static const char* value(const ::nesfr3_msgs::TrackingData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nesfr3_msgs::TrackingData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"int32[] id_num\n"
"int32[] tracking_id\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::nesfr3_msgs::TrackingData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nesfr3_msgs::TrackingData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.id_num);
      stream.next(m.tracking_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrackingData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nesfr3_msgs::TrackingData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nesfr3_msgs::TrackingData_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "id_num[]" << std::endl;
    for (size_t i = 0; i < v.id_num.size(); ++i)
    {
      s << indent << "  id_num[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.id_num[i]);
    }
    s << indent << "tracking_id[]" << std::endl;
    for (size_t i = 0; i < v.tracking_id.size(); ++i)
    {
      s << indent << "  tracking_id[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.tracking_id[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NESFR3_MSGS_MESSAGE_TRACKINGDATA_H
