// Generated by gencpp from file bayes_people_tracker/PeopleTracker.msg
// DO NOT EDIT!


#ifndef BAYES_PEOPLE_TRACKER_MESSAGE_PEOPLETRACKER_H
#define BAYES_PEOPLE_TRACKER_MESSAGE_PEOPLETRACKER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose.h>

namespace bayes_people_tracker
{
template <class ContainerAllocator>
struct PeopleTracker_
{
  typedef PeopleTracker_<ContainerAllocator> Type;

  PeopleTracker_()
    : header()
    , uuids()
    , poses()
    , distances()
    , angles()
    , min_distance(0.0)
    , min_distance_angle(0.0)  {
    }
  PeopleTracker_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , uuids(_alloc)
    , poses(_alloc)
    , distances(_alloc)
    , angles(_alloc)
    , min_distance(0.0)
    , min_distance_angle(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _uuids_type;
  _uuids_type uuids;

   typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  _poses_type;
  _poses_type poses;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _distances_type;
  _distances_type distances;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _angles_type;
  _angles_type angles;

   typedef double _min_distance_type;
  _min_distance_type min_distance;

   typedef double _min_distance_angle_type;
  _min_distance_angle_type min_distance_angle;





  typedef boost::shared_ptr< ::bayes_people_tracker::PeopleTracker_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bayes_people_tracker::PeopleTracker_<ContainerAllocator> const> ConstPtr;

}; // struct PeopleTracker_

typedef ::bayes_people_tracker::PeopleTracker_<std::allocator<void> > PeopleTracker;

typedef boost::shared_ptr< ::bayes_people_tracker::PeopleTracker > PeopleTrackerPtr;
typedef boost::shared_ptr< ::bayes_people_tracker::PeopleTracker const> PeopleTrackerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bayes_people_tracker::PeopleTracker_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bayes_people_tracker::PeopleTracker_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bayes_people_tracker::PeopleTracker_<ContainerAllocator1> & lhs, const ::bayes_people_tracker::PeopleTracker_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.uuids == rhs.uuids &&
    lhs.poses == rhs.poses &&
    lhs.distances == rhs.distances &&
    lhs.angles == rhs.angles &&
    lhs.min_distance == rhs.min_distance &&
    lhs.min_distance_angle == rhs.min_distance_angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bayes_people_tracker::PeopleTracker_<ContainerAllocator1> & lhs, const ::bayes_people_tracker::PeopleTracker_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bayes_people_tracker

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::bayes_people_tracker::PeopleTracker_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bayes_people_tracker::PeopleTracker_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bayes_people_tracker::PeopleTracker_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bayes_people_tracker::PeopleTracker_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bayes_people_tracker::PeopleTracker_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bayes_people_tracker::PeopleTracker_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bayes_people_tracker::PeopleTracker_<ContainerAllocator> >
{
  static const char* value()
  {
    return "748ea76bfa4fbc576a15a2b7a15777db";
  }

  static const char* value(const ::bayes_people_tracker::PeopleTracker_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x748ea76bfa4fbc57ULL;
  static const uint64_t static_value2 = 0x6a15a2b7a15777dbULL;
};

template<class ContainerAllocator>
struct DataType< ::bayes_people_tracker::PeopleTracker_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bayes_people_tracker/PeopleTracker";
  }

  static const char* value(const ::bayes_people_tracker::PeopleTracker_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bayes_people_tracker::PeopleTracker_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"string[] uuids             # Unique uuid5 (NAMESPACE_DNS) person id as string. Id is based on system time on start-up and tracker id. Array index matches ids array index\n"
"geometry_msgs/Pose[] poses # The real world poses of the detected people in the given target frame. Default: /map. Array index matches ids/uuids array index\n"
"float64[] distances        # The distances of the detected persons to the robot (polar coordinates). Array index matches ids array index.\n"
"float64[] angles           # Angles of the detected persons to the coordinate frames z axis (polar coordinates). Array index matches ids array index.\n"
"float64 min_distance       # The minimal distance in the distances array.\n"
"float64 min_distance_angle # The angle according to the minimal distance.\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::bayes_people_tracker::PeopleTracker_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bayes_people_tracker::PeopleTracker_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.uuids);
      stream.next(m.poses);
      stream.next(m.distances);
      stream.next(m.angles);
      stream.next(m.min_distance);
      stream.next(m.min_distance_angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PeopleTracker_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bayes_people_tracker::PeopleTracker_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bayes_people_tracker::PeopleTracker_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "uuids[]" << std::endl;
    for (size_t i = 0; i < v.uuids.size(); ++i)
    {
      s << indent << "  uuids[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.uuids[i]);
    }
    s << indent << "poses[]" << std::endl;
    for (size_t i = 0; i < v.poses.size(); ++i)
    {
      s << indent << "  poses[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.poses[i]);
    }
    s << indent << "distances[]" << std::endl;
    for (size_t i = 0; i < v.distances.size(); ++i)
    {
      s << indent << "  distances[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.distances[i]);
    }
    s << indent << "angles[]" << std::endl;
    for (size_t i = 0; i < v.angles.size(); ++i)
    {
      s << indent << "  angles[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.angles[i]);
    }
    s << indent << "min_distance: ";
    Printer<double>::stream(s, indent + "  ", v.min_distance);
    s << indent << "min_distance_angle: ";
    Printer<double>::stream(s, indent + "  ", v.min_distance_angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BAYES_PEOPLE_TRACKER_MESSAGE_PEOPLETRACKER_H
