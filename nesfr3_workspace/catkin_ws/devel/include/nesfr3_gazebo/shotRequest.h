// Generated by gencpp from file nesfr3_gazebo/shotRequest.msg
// DO NOT EDIT!


#ifndef NESFR3_GAZEBO_MESSAGE_SHOTREQUEST_H
#define NESFR3_GAZEBO_MESSAGE_SHOTREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>

namespace nesfr3_gazebo
{
template <class ContainerAllocator>
struct shotRequest_
{
  typedef shotRequest_<ContainerAllocator> Type;

  shotRequest_()
    : human_id(0)
    , distance(0.0)
    , direction()
    , shot_size()  {
    }
  shotRequest_(const ContainerAllocator& _alloc)
    : human_id(0)
    , distance(0.0)
    , direction(_alloc)
    , shot_size(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _human_id_type;
  _human_id_type human_id;

   typedef double _distance_type;
  _distance_type distance;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _direction_type;
  _direction_type direction;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _shot_size_type;
  _shot_size_type shot_size;





  typedef boost::shared_ptr< ::nesfr3_gazebo::shotRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nesfr3_gazebo::shotRequest_<ContainerAllocator> const> ConstPtr;

}; // struct shotRequest_

typedef ::nesfr3_gazebo::shotRequest_<std::allocator<void> > shotRequest;

typedef boost::shared_ptr< ::nesfr3_gazebo::shotRequest > shotRequestPtr;
typedef boost::shared_ptr< ::nesfr3_gazebo::shotRequest const> shotRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nesfr3_gazebo::shotRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nesfr3_gazebo::shotRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::nesfr3_gazebo::shotRequest_<ContainerAllocator1> & lhs, const ::nesfr3_gazebo::shotRequest_<ContainerAllocator2> & rhs)
{
  return lhs.human_id == rhs.human_id &&
    lhs.distance == rhs.distance &&
    lhs.direction == rhs.direction &&
    lhs.shot_size == rhs.shot_size;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::nesfr3_gazebo::shotRequest_<ContainerAllocator1> & lhs, const ::nesfr3_gazebo::shotRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace nesfr3_gazebo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::nesfr3_gazebo::shotRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nesfr3_gazebo::shotRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nesfr3_gazebo::shotRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nesfr3_gazebo::shotRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nesfr3_gazebo::shotRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nesfr3_gazebo::shotRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nesfr3_gazebo::shotRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0eb907bc5a14eb6290a41494f46426a4";
  }

  static const char* value(const ::nesfr3_gazebo::shotRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0eb907bc5a14eb62ULL;
  static const uint64_t static_value2 = 0x90a41494f46426a4ULL;
};

template<class ContainerAllocator>
struct DataType< ::nesfr3_gazebo::shotRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nesfr3_gazebo/shotRequest";
  }

  static const char* value(const ::nesfr3_gazebo::shotRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nesfr3_gazebo::shotRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 human_id\n"
"float64 distance\n"
"geometry_msgs/Vector3 direction\n"
"string shot_size\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::nesfr3_gazebo::shotRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nesfr3_gazebo::shotRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.human_id);
      stream.next(m.distance);
      stream.next(m.direction);
      stream.next(m.shot_size);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct shotRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nesfr3_gazebo::shotRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nesfr3_gazebo::shotRequest_<ContainerAllocator>& v)
  {
    s << indent << "human_id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.human_id);
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
    s << indent << "direction: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.direction);
    s << indent << "shot_size: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.shot_size);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NESFR3_GAZEBO_MESSAGE_SHOTREQUEST_H
